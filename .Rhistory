# plot predicted DBH using lidar height
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "black", pch = 1)
# plot predicted height using field DBH
points(4.5 + exp(DFnls_coeff[1] + DFnls_coeff[2] * DF$DBH_cm ^ DFnls_coeff[3]), DF$DBH_cm, col = "magenta", pch = 1)
# fit new model for WH using Hanus equation form
# DBH in cm and height in m
WHadd_nls <- nls(data = WH, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "black", pch = 16)
# plot predicted height using field DBH
points(4.5 + exp(WHnls_coeff[1] + WHnls_coeff[2] * WH$DBH_cm ^ WHnls_coeff[3]), WH$DBH_cm, col = "magenta", pch = 16)
legend(36, 35, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("black", "black"))
# plot residuals for predicted DBH
#hist((log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]) - DF$DBH_cm)
#hist((log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]) - WH$DBH_cm)
# fit non-linear model to directly predict DBH given height
library(nls2)
DFadd_nls <- nls(data = DF, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "orange", pch = 1)
WHadd_nls <- nls(data = WH, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 4, a1 = -28, a2 = -1))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "orange", pch = 16)
inputDataFile <- "Extras/AdjustedField_T3_Training_TreeTops_AllPlots.csv"
# read data
inputData <- read.csv(inputDataFile, stringsAsFactors = FALSE)
# compute the avearge height using height measured by Ally and Bob in the point cloud
inputData$aveHt <- (inputData$Total.Height.Ally + inputData$Total.Height.Bob) / 2
# functions don't work with multiple trees (there are if statements that fail)
fvsDBH <- c()
hanusDBH <- c()
for (i in 1:nrow(inputData)) {
fvsDBH[i] <- predictDBH(inputData$Species[i], inputData$aveHt[i], method = "fvs", location = 1, heightUnits = "meters", DBHUnits = "cm")
hanusDBH[i] <- predictDBH(inputData$Species[i], inputData$aveHt[i], method = "hanus", location = 1, heightUnits = "meters", DBHUnits = "cm")
}
inputData$fvsDBH <- fvsDBH
inputData$hanusDBH <- hanusDBH
DF <- inputData[inputData$Species == "PSME", ]
WH <- inputData[inputData$Species == "TSHE", ]
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Predicted DBH (cm)", xlab = "Lidar height (m)", main = "Comparing field and predicted DBH & lidar height")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(36, 25, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
points(DF$aveHt, DF$fvsDBH, col = "green", pch = 1)
points(WH$aveHt, WH$fvsDBH, col = "green", pch = 16)
points(DF$aveHt, DF$hanusDBH, col = "blue", pch = 1)
points(WH$aveHt, WH$hanusDBH, col = "blue", pch = 16)
legend(20, 70, c("Hanus PSME", "Hanus TSHE", "FVS PSME", "FVS TSHE"), pch = c(1, 16, 1, 16), col = c("blue", "blue", "green", "green"))
DFadd_nls <- nls(data = DF, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Predicted DBH (cm)", xlab = "Lidar height (m)", main = "Comparing field and predicted DBH & lidar height")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(36, 25, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
# plot predicted DBH using lidar height
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "black", pch = 1)
# plot predicted height using field DBH
points(4.5 + exp(DFnls_coeff[1] + DFnls_coeff[2] * DF$DBH_cm ^ DFnls_coeff[3]), DF$DBH_cm, col = "magenta", pch = 1)
# fit new model for WH using Hanus equation form
# DBH in cm and height in m
WHadd_nls <- nls(data = WH, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "black", pch = 16)
# plot predicted height using field DBH
#points(4.5 + exp(WHnls_coeff[1] + WHnls_coeff[2] * WH$DBH_cm ^ WHnls_coeff[3]), WH$DBH_cm, col = "magenta", pch = 16)
legend(36, 35, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("black", "black"))
DFadd_nls <- nls(data = DF, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Predicted DBH (cm)", xlab = "Lidar height (m)", main = "Comparing field and predicted DBH & lidar height")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(36, 25, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
# plot predicted DBH using lidar height
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "black", pch = 1)
# plot predicted height using field DBH
#points(4.5 + exp(DFnls_coeff[1] + DFnls_coeff[2] * DF$DBH_cm ^ DFnls_coeff[3]), DF$DBH_cm, col = "magenta", pch = 1)
# fit new model for WH using Hanus equation form
# DBH in cm and height in m
WHadd_nls <- nls(data = WH, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "black", pch = 16)
# plot predicted height using field DBH
#points(4.5 + exp(WHnls_coeff[1] + WHnls_coeff[2] * WH$DBH_cm ^ WHnls_coeff[3]), WH$DBH_cm, col = "magenta", pch = 16)
legend(36, 35, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("black", "black"))
DFadd_nls <- nls(data = DF, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Predicted DBH (cm)", xlab = "Lidar height (m)", main = "Comparing field and predicted DBH & lidar height")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(36, 25, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "orange", pch = 1)
WHadd_nls <- nls(data = WH, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 4, a1 = -28, a2 = -1))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "orange", pch = 16)
legend(36, 35, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("orange", "orange"))
legend(35, 35, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("orange", "orange"))
DFadd_nls <- nls(data = DF, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Predicted DBH (cm)", xlab = "Lidar height (m)", main = "Comparing field and predicted DBH & lidar height")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(35, 24, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "orange", pch = 1)
WHadd_nls <- nls(data = WH, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 4, a1 = -28, a2 = -1))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "orange", pch = 16)
legend(35, 33, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("orange", "orange"))
DFadd_nls <- nls(data = DF, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Field DBH (cm)", xlab = "Predicted height (m)", main = "Predicted height given field DBH")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(36, 25, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
# plot predicted DBH using lidar height
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "black", pch = 1)
# plot predicted height using field DBH
#points(4.5 + exp(DFnls_coeff[1] + DFnls_coeff[2] * DF$DBH_cm ^ DFnls_coeff[3]), DF$DBH_cm, col = "magenta", pch = 1)
# fit new model for WH using Hanus equation form
# DBH in cm and height in m
WHadd_nls <- nls(data = WH, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "black", pch = 16)
# plot predicted height using field DBH
#points(4.5 + exp(WHnls_coeff[1] + WHnls_coeff[2] * WH$DBH_cm ^ WHnls_coeff[3]), WH$DBH_cm, col = "magenta", pch = 16)
legend(36, 35, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("black", "black"))
library(nls2)
DFadd_nls <- nls(data = DF, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Predicted DBH (cm)", xlab = "Lidar height (m)", main = "Predicted DBH given lidar height")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(35, 24, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "orange", pch = 1)
WHadd_nls <- nls(data = WH, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 4, a1 = -28, a2 = -1))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "orange", pch = 16)
legend(35, 33, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("orange", "orange"))
DFadd_nls <- nls(data = DF, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Field DBH (cm)", xlab = "Predicted height (m)", main = "Predicted height given field DBH")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(35, 24, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
# plot predicted DBH using lidar height
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "black", pch = 1)
# plot predicted height using field DBH
#points(4.5 + exp(DFnls_coeff[1] + DFnls_coeff[2] * DF$DBH_cm ^ DFnls_coeff[3]), DF$DBH_cm, col = "magenta", pch = 1)
# fit new model for WH using Hanus equation form
# DBH in cm and height in m
WHadd_nls <- nls(data = WH, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "black", pch = 16)
# plot predicted height using field DBH
#points(4.5 + exp(WHnls_coeff[1] + WHnls_coeff[2] * WH$DBH_cm ^ WHnls_coeff[3]), WH$DBH_cm, col = "magenta", pch = 16)
legend(35, 33, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("black", "black"))
DFadd_nls <- nls(data = DF, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Predicted DBH (cm)", xlab = "Lidar height (m)", main = "Predicted DBH given lidar height")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(35, 24, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "orange", pch = 1)
WHadd_nls <- nls(data = WH, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 4, a1 = -28, a2 = -1))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "orange", pch = 16)
legend(35, 33, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("orange", "orange"))
DFadd_nls <- nls(data = DF, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Field DBH (cm)", xlab = "Predicted height (m)", main = "Predicted height given field DBH")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(35, 24, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
# plot predicted DBH using lidar height
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "black", pch = 1)
# plot predicted height using field DBH
#points(4.5 + exp(DFnls_coeff[1] + DFnls_coeff[2] * DF$DBH_cm ^ DFnls_coeff[3]), DF$DBH_cm, col = "magenta", pch = 1)
# fit new model for WH using Hanus equation form
# DBH in cm and height in m
WHadd_nls <- nls(data = WH, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "black", pch = 16)
# plot predicted height using field DBH
#points(4.5 + exp(WHnls_coeff[1] + WHnls_coeff[2] * WH$DBH_cm ^ WHnls_coeff[3]), WH$DBH_cm, col = "magenta", pch = 16)
legend(35, 33, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("black", "black"))
DFadd_nls <- nls(data = DF, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "orange", pch = 1)
WHadd_nls <- nls(data = WH, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 4, a1 = -28, a2 = -1))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "orange", pch = 16)
DFadd_nls <- nls(data = DF, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Field DBH (cm)", xlab = "Predicted height (m)", main = "Predicted height given field DBH")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(35, 24, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
# plot predicted DBH using lidar height
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "black", pch = 1)
points(4.5 + exp(DFnls_coeff[1] + DFnls_coeff[2] * DF$DBH_cm ^ DFnls_coeff[3]), DF$DBH_cm, col = "magenta", pch = 1)
DFadd_nls <- nls(data = DF, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Predicted DBH (cm)", xlab = "Lidar height (m)", main = "Predicted DBH given lidar height")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(35, 24, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "orange", pch = 1)
points(4.5 + exp(DFnls_coeff[1] + DFnls_coeff[2] * DF$DBH_cm ^ DFnls_coeff[3]), DF$DBH_cm, col = "magenta", pch = 1)
hist((log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]) - DF$DBH_cm)
DFadd_nls <- nls(data = DF, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Field DBH (cm)", xlab = "Predicted height (m)", main = "Predicted height given field DBH")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(35, 24, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
# plot predicted DBH using lidar height
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "black", pch = 1)
# plot predicted height using field DBH
#points(4.5 + exp(DFnls_coeff[1] + DFnls_coeff[2] * DF$DBH_cm ^ DFnls_coeff[3]), DF$DBH_cm, col = "magenta", pch = 1)
# fit new model for WH using Hanus equation form
# DBH in cm and height in m
WHadd_nls <- nls(data = WH, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "black", pch = 16)
# plot predicted height using field DBH
#points(4.5 + exp(WHnls_coeff[1] + WHnls_coeff[2] * WH$DBH_cm ^ WHnls_coeff[3]), WH$DBH_cm, col = "magenta", pch = 16)
legend(35, 33, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("black", "black"))
hist((log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]) - DF$DBH_cm)
hist((log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]) - WH$DBH_cm)
WHadd_nls <- nls(data = WH, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 4, a1 = -28, a2 = -1))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "orange", pch = 16)
legend(35, 33, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("orange", "orange"))
hist((log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]) - WH$DBH_cm)
ave((log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]) - WH$DBH_cm)
?ave
mean((log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]) - WH$DBH_cm)
DFadd_nls <- nls(data = DF, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Field DBH (cm)", xlab = "Predicted height (m)", main = "Predicted height given field DBH")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(35, 24, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
# plot predicted DBH using lidar height
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "black", pch = 1)
# plot predicted height using field DBH
#points(4.5 + exp(DFnls_coeff[1] + DFnls_coeff[2] * DF$DBH_cm ^ DFnls_coeff[3]), DF$DBH_cm, col = "magenta", pch = 1)
# fit new model for WH using Hanus equation form
# DBH in cm and height in m
WHadd_nls <- nls(data = WH, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "black", pch = 16)
# plot predicted height using field DBH
#points(4.5 + exp(WHnls_coeff[1] + WHnls_coeff[2] * WH$DBH_cm ^ WHnls_coeff[3]), WH$DBH_cm, col = "magenta", pch = 16)
legend(35, 33, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("black", "black"))
# overall bias
mean((log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFGnls_coeff["a1"])^(1 / DFnls_coeff["a2"]) - DF$DBH_cm)
# overall bias
mean((log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]) - DF$DBH_cm)
mean((log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]) - WH$DBH_cm)
DFadd_nls <- nls(data = DF, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Predicted DBH (cm)", xlab = "Lidar height (m)", main = "Predicted DBH given lidar height")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(35, 24, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "orange", pch = 1)
# plot predicted height using field DBH
#points(4.5 + exp(DFnls_coeff[1] + DFnls_coeff[2] * DF$DBH_cm ^ DFnls_coeff[3]), DF$DBH_cm, col = "magenta", pch = 1)
WHadd_nls <- nls(data = WH, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 4, a1 = -28, a2 = -1))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "orange", pch = 16)
legend(35, 33, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("orange", "orange"))
# overall bias
mean((log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]) - DF$DBH_cm)
mean((log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]) - WH$DBH_cm)
inputDataFile <- "Extras/AdjustedField_T3_Training_TreeTops_AllPlots.csv"
# read data
inputData <- read.csv(inputDataFile, stringsAsFactors = FALSE)
# compute the avearge height using height measured by Ally and Bob in the point cloud
inputData$aveHt <- (inputData$Total.Height.Ally + inputData$Total.Height.Bob) / 2
# functions don't work with multiple trees (there are if statements that fail)
fvsDBH <- c()
hanusDBH <- c()
for (i in 1:nrow(inputData)) {
fvsDBH[i] <- predictDBH(inputData$Species[i], inputData$aveHt[i], method = "fvs", location = 1, heightUnits = "meters", DBHUnits = "cm")
hanusDBH[i] <- predictDBH(inputData$Species[i], inputData$aveHt[i], method = "hanus", location = 1, heightUnits = "meters", DBHUnits = "cm")
}
inputData$fvsDBH <- fvsDBH
inputData$hanusDBH <- hanusDBH
DF <- inputData[inputData$Species == "PSME", ]
WH <- inputData[inputData$Species == "TSHE", ]
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Predicted DBH (cm)", xlab = "Lidar height (m)", main = "Comparing field and predicted DBH & lidar height")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(36, 25, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
points(DF$aveHt, DF$fvsDBH, col = "green", pch = 1)
points(WH$aveHt, WH$fvsDBH, col = "green", pch = 16)
points(DF$aveHt, DF$hanusDBH, col = "blue", pch = 1)
points(WH$aveHt, WH$hanusDBH, col = "blue", pch = 16)
legend(20, 70, c("Hanus PSME", "Hanus TSHE", "FVS PSME", "FVS TSHE"), pch = c(1, 16, 1, 16), col = c("blue", "blue", "green", "green"))
DFadd_nls <- nls(data = DF, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Field DBH (cm)", xlab = "Predicted height (m)", main = "Predicted height given field DBH")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(35, 24, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
# plot predicted DBH using lidar height
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "black", pch = 1)
# plot predicted height using field DBH
#points(4.5 + exp(DFnls_coeff[1] + DFnls_coeff[2] * DF$DBH_cm ^ DFnls_coeff[3]), DF$DBH_cm, col = "magenta", pch = 1)
# fit new model for WH using Hanus equation form
# DBH in cm and height in m
WHadd_nls <- nls(data = WH, aveHt ~ 4.5 + exp(a0 + a1 * DBH_cm ^ a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "black", pch = 16)
# plot predicted height using field DBH
#points(4.5 + exp(WHnls_coeff[1] + WHnls_coeff[2] * WH$DBH_cm ^ WHnls_coeff[3]), WH$DBH_cm, col = "magenta", pch = 16)
legend(35, 33, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("black", "black"))
DFadd_nls <- nls(data = DF, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 7.0, a1 = -6.0, a2 = -0.25))
DFnls_coeff <- coef(DFadd_nls)
plot(DF$aveHt, DF$DBH_cm, col = "red", pch = 1, ylab = "Predicted DBH (cm)", xlab = "Lidar height (m)", main = "Predicted DBH given lidar height")
points(WH$aveHt, WH$DBH_cm, col = "red", pch = 16)
legend(35, 24, c("Field PSME", "Field TSHE"), pch = c(1, 16), col = c("red", "red"))
points(DF$aveHt, (log((DF$aveHt - 4.5) / exp(DFnls_coeff["a0"])) / DFnls_coeff["a1"])^(1 / DFnls_coeff["a2"]), col = "orange", pch = 1)
# plot predicted height using field DBH
#points(4.5 + exp(DFnls_coeff[1] + DFnls_coeff[2] * DF$DBH_cm ^ DFnls_coeff[3]), DF$DBH_cm, col = "magenta", pch = 1)
WHadd_nls <- nls(data = WH, DBH_cm ~ (log((aveHt - 4.5) / exp(a0)) / a1) ^ (1 / a2),
start = list(a0 = 4, a1 = -28, a2 = -1))
WHnls_coeff <- coef(WHadd_nls)
points(WH$aveHt, (log((WH$aveHt - 4.5) / exp(WHnls_coeff["a0"])) / WHnls_coeff["a1"])^(1 / WHnls_coeff["a2"]), col = "orange", pch = 16)
legend(35, 33, c("Custom PSME", "Custom TSHE"), pch = c(1, 16), col = c("orange", "orange"))
plotNumbers <- c("07", "08", "09", "10", "13", "14",
"16", "17", "18", "19", "20", "21",
"22", "23", "24", "25", "26", "27",
"28", "29", "31", "34", "36", "37",
"42", "43", "46", "47")
# Bob's trees
outputFolder <- "E:/Backup/R_Stuff/ONRCDroneLidar/AllyPlots"
adjustedTreesBob <- read.csv(file = paste0(outputFolder, "/WORKING_FUSIONtrees.csv"), stringsAsFactors = FALSE)
originalTrees <- read.csv(file = paste0(outputFolder, "/FieldTrees.csv"), stringsAsFactors = FALSE)
# compute top location
adjustedTreesBob$TopX <- adjustedTreesBob$X + (cos((450 - adjustedTreesBob$Lean.Azimuth) * pi / 180.0) * sin(adjustedTreesBob$Lean.Angle * pi / 180.0) * adjustedTreesBob$Total.Height)
adjustedTreesBob$TopY <- adjustedTreesBob$Y + (sin((450 - adjustedTreesBob$Lean.Azimuth) * pi / 180.0) * sin(adjustedTreesBob$Lean.Angle * pi / 180.0) * adjustedTreesBob$Total.Height)
# read Ally's plots...
# some choice for handling match
# -work plot-by-plot
# -read all of Ally's plots, then work across all plots
adjustedTreesAlly <- data.frame()
for (i in 1:length(plotNumbers)) {
#  i <- 1
# make sure file exists
if (file.exists(paste0(outputFolder, "/Plot_", plotNumbers[i], "_Field_FUSIONtrees.csv"))) {
# read Ally's trees
t <- read.csv(file = paste0(outputFolder, "/Plot_", plotNumbers[i], "_Field_FUSIONtrees.csv"), stringsAsFactors = FALSE)
adjustedTreesAlly <- rbind(adjustedTreesAlly, t)
}
}
# compute top location
adjustedTreesAlly$TopX <- adjustedTreesAlly$X + (cos((450 - adjustedTreesAlly$Lean.Azimuth) * pi / 180.0) * sin(adjustedTreesAlly$Lean.Angle * pi / 180.0) * adjustedTreesAlly$Total.Height)
adjustedTreesAlly$TopY <- adjustedTreesAlly$Y + (sin((450 - adjustedTreesAlly$Lean.Azimuth) * pi / 180.0) * sin(adjustedTreesAlly$Lean.Angle * pi / 180.0) * adjustedTreesAlly$Total.Height)
# match trees by identifier
plotTrees <- merge(adjustedTreesAlly, adjustedTreesBob, by = "Tree.ID", all = FALSE, suffixes = c(".Ally", ".Bob"))
# compute difference in base and top location
plotTrees$diffX <- plotTrees$X.Ally - plotTrees$X.Bob
plotTrees$diffY <- plotTrees$Y.Ally - plotTrees$Y.Bob
plotTrees$diffTopX <- plotTrees$TopX.Ally - plotTrees$TopX.Bob
plotTrees$diffTopY <- plotTrees$TopY.Ally - plotTrees$TopY.Bob
plotTrees$diff <- sqrt(plotTrees$diffX ^ 2 + plotTrees$diffY ^ 2)
plotTrees$diffTop <- sqrt(plotTrees$diffTopX ^ 2 + plotTrees$diffTopY ^ 2)
# build a plot number
plotTrees$PlotID <- as.factor(substr(plotTrees$Tree.ID, 1, 2))
# drop all but trees with status code = 0
plotTrees <- plotTrees[plotTrees$Status.Code.Ally == 0, ]
plotTrees <- plotTrees[plotTrees$Status.Code.Bob == 0, ]
boxplot(diff ~ PlotID, data = plotTrees, main = "Tree base")
boxplot(diffTop ~ PlotID, data = plotTrees, main = "Tree top")
# compare adjusted locations to original trees
originalPlotTrees <- merge(plotTrees, originalTrees, by.x = "Tree.ID", by.y = "TreeID")
originalPlotTrees$origdiffX.Ally <- originalPlotTrees$X.Ally - originalPlotTrees$Xfield
originalPlotTrees$origdiffY.Ally <- originalPlotTrees$Y.Ally - originalPlotTrees$Yfield
originalPlotTrees$origdiff.Ally <- sqrt(originalPlotTrees$origdiffX.Ally ^ 2 + originalPlotTrees$origdiffY.Ally ^ 2)
originalPlotTrees$origdiffX.Bob <- originalPlotTrees$X.Bob - originalPlotTrees$Xfield
originalPlotTrees$origdiffY.Bob <- originalPlotTrees$Y.Bob - originalPlotTrees$Yfield
originalPlotTrees$origdiff.Bob <- sqrt(originalPlotTrees$origdiffX.Bob ^ 2 + originalPlotTrees$origdiffY.Bob ^ 2)
originalPlotTrees$heightdiff <- abs(originalPlotTrees$Total.Height.Bob - originalPlotTrees$Total.Height.Ally)
boxplot(origdiff.Ally ~ PlotID, data = originalPlotTrees, main = "Tree base (original trees - Ally)", ylim = c(0, 8))
boxplot(origdiff.Bob ~ PlotID, data = originalPlotTrees, main = "Tree base (original trees - Bob)", ylim = c(0, 8))
boxplot(heightdiff ~ PlotID, data = originalPlotTrees, main = "Tree base (original trees - Bob)", ylim = c(0, 8))
# drop any trees where the base locations differ by more than 1m
distThreshold <- 1
trainingTrees <- originalPlotTrees[originalPlotTrees$diff <= distThreshold, ]
# drop trees where we had a height difference of 1m or more
heightThreshold <- 1
trainingTrees <- trainingTrees[trainingTrees$heightdiff <= heightThreshold, ]
boxplot(heightdiff ~ PlotID, data = trainingTrees, main = "Tree height difference (Bob - Ally)", ylim = c(0, 2))
boxplot(diff ~ PlotID, data = trainingTrees, main = "Tree base", ylim = c(0, 2))
boxplot(diffTop ~ PlotID, data = trainingTrees, main = "Tree top", ylim = c(0, 2))
?plot
boxplot(diff ~ PlotID, data = plotTrees, main = "Tree base location difference", xlab = "Plot number", ylab = "Horizontal difference (m)")
boxplot(diffTop ~ PlotID, data = plotTrees, main = "Tree top location differences", xlab = "Plot number", ylab = "Horizontal difference (m)")
plotNumbers <- c("07", "08", "09", "10", "13", "14",
"16", "17", "18", "19", "20", "21",
"22", "23", "24", "25", "26", "27",
"28", "29", "31", "34", "36", "37",
"42", "43", "46", "47")
# Bob's trees
outputFolder <- "E:/Backup/R_Stuff/ONRCDroneLidar/AllyPlots"
adjustedTreesBob <- read.csv(file = paste0(outputFolder, "/WORKING_FUSIONtrees.csv"), stringsAsFactors = FALSE)
originalTrees <- read.csv(file = paste0(outputFolder, "/FieldTrees.csv"), stringsAsFactors = FALSE)
# compute top location
adjustedTreesBob$TopX <- adjustedTreesBob$X + (cos((450 - adjustedTreesBob$Lean.Azimuth) * pi / 180.0) * sin(adjustedTreesBob$Lean.Angle * pi / 180.0) * adjustedTreesBob$Total.Height)
adjustedTreesBob$TopY <- adjustedTreesBob$Y + (sin((450 - adjustedTreesBob$Lean.Azimuth) * pi / 180.0) * sin(adjustedTreesBob$Lean.Angle * pi / 180.0) * adjustedTreesBob$Total.Height)
# read Ally's plots...
# some choice for handling match
# -work plot-by-plot
# -read all of Ally's plots, then work across all plots
adjustedTreesAlly <- data.frame()
for (i in 1:length(plotNumbers)) {
#  i <- 1
# make sure file exists
if (file.exists(paste0(outputFolder, "/Plot_", plotNumbers[i], "_Field_FUSIONtrees.csv"))) {
# read Ally's trees
t <- read.csv(file = paste0(outputFolder, "/Plot_", plotNumbers[i], "_Field_FUSIONtrees.csv"), stringsAsFactors = FALSE)
adjustedTreesAlly <- rbind(adjustedTreesAlly, t)
}
}
# compute top location
adjustedTreesAlly$TopX <- adjustedTreesAlly$X + (cos((450 - adjustedTreesAlly$Lean.Azimuth) * pi / 180.0) * sin(adjustedTreesAlly$Lean.Angle * pi / 180.0) * adjustedTreesAlly$Total.Height)
adjustedTreesAlly$TopY <- adjustedTreesAlly$Y + (sin((450 - adjustedTreesAlly$Lean.Azimuth) * pi / 180.0) * sin(adjustedTreesAlly$Lean.Angle * pi / 180.0) * adjustedTreesAlly$Total.Height)
# match trees by identifier
plotTrees <- merge(adjustedTreesAlly, adjustedTreesBob, by = "Tree.ID", all = FALSE, suffixes = c(".Ally", ".Bob"))
plotTrees$diffX <- plotTrees$X.Ally - plotTrees$X.Bob
plotTrees$diffY <- plotTrees$Y.Ally - plotTrees$Y.Bob
plotTrees$diffTopX <- plotTrees$TopX.Ally - plotTrees$TopX.Bob
plotTrees$diffTopY <- plotTrees$TopY.Ally - plotTrees$TopY.Bob
plotTrees$diff <- sqrt(plotTrees$diffX ^ 2 + plotTrees$diffY ^ 2)
plotTrees$diffTop <- sqrt(plotTrees$diffTopX ^ 2 + plotTrees$diffTopY ^ 2)
# build a plot number
plotTrees$PlotID <- as.factor(substr(plotTrees$Tree.ID, 1, 2))
# drop all but trees with status code = 0
plotTrees <- plotTrees[plotTrees$Status.Code.Ally == 0, ]
plotTrees <- plotTrees[plotTrees$Status.Code.Bob == 0, ]
# 624 trees that were relocated and matched
boxplot(diff ~ PlotID, data = plotTrees, main = "Tree base location differences", sub = "Bob & Ally", xlab = "Plot number", ylab = "Horizontal difference (m)")
# 624 trees that were relocated and matched
boxplot(diff ~ PlotID, data = plotTrees, main = "Tree base location \r differences", sub = "Bob & Ally", xlab = "Plot number", ylab = "Horizontal difference (m)")
# 624 trees that were relocated and matched
boxplot(diff ~ PlotID, data = plotTrees, main = "Tree base location \n differences", sub = "Bob & Ally", xlab = "Plot number", ylab = "Horizontal difference (m)")
# 624 trees that were relocated and matched
boxplot(diff ~ PlotID, data = plotTrees, main = "Tree base location differences\nBob & Ally", xlab = "Plot number", ylab = "Horizontal difference (m)")
originalPlotTrees <- merge(plotTrees, originalTrees, by.x = "Tree.ID", by.y = "TreeID")
originalPlotTrees$origdiffX.Ally <- originalPlotTrees$X.Ally - originalPlotTrees$Xfield
originalPlotTrees$origdiffY.Ally <- originalPlotTrees$Y.Ally - originalPlotTrees$Yfield
originalPlotTrees$origdiff.Ally <- sqrt(originalPlotTrees$origdiffX.Ally ^ 2 + originalPlotTrees$origdiffY.Ally ^ 2)
originalPlotTrees$origdiffX.Bob <- originalPlotTrees$X.Bob - originalPlotTrees$Xfield
originalPlotTrees$origdiffY.Bob <- originalPlotTrees$Y.Bob - originalPlotTrees$Yfield
originalPlotTrees$origdiff.Bob <- sqrt(originalPlotTrees$origdiffX.Bob ^ 2 + originalPlotTrees$origdiffY.Bob ^ 2)
originalPlotTrees$heightdiff <- abs(originalPlotTrees$Total.Height.Bob - originalPlotTrees$Total.Height.Ally)
boxplot(origdiff.Ally ~ PlotID, data = originalPlotTrees, main = "Tree base location differences\nAlly & Field", ylim = c(0, 8), xlab = "Plot number", ylab = "Horizontal difference (m)")
boxplot(origdiff.Bob ~ PlotID, data = originalPlotTrees, main = "Tree base location differences\nBob & Field", ylim = c(0, 8), xlab = "Plot number", ylab = "Horizontal difference (m)")
boxplot(heightdiff ~ PlotID, data = originalPlotTrees, main = "Tree height difference\nBob & Ally", ylim = c(0, 8), xlab = "Plot number", ylab = "Vertical difference (m)")
# drop any trees where the base locations differ by more than 1m
distThreshold <- 1
trainingTrees <- originalPlotTrees[originalPlotTrees$diff <= distThreshold, ]
# drop trees where we had a height difference of 1m or more
heightThreshold <- 1
trainingTrees <- trainingTrees[trainingTrees$heightdiff <= heightThreshold, ]
boxplot(heightdiff ~ PlotID, data = trainingTrees, main = "Tree height difference (Bob - Ally)", ylim = c(0, 2), xlab = "Plot number", ylab = "Vertical difference (m)")
boxplot(heightdiff ~ PlotID, data = trainingTrees, main = "Tree height difference (Bob - Ally)", ylim = c(0, 1.5), xlab = "Plot number", ylab = "Vertical difference (m)")
boxplot(heightdiff ~ PlotID, data = trainingTrees, main = "Tree height difference (Bob - Ally)", ylim = c(0, 1.1), xlab = "Plot number", ylab = "Vertical difference (m)")
boxplot(diff ~ PlotID, data = trainingTrees, main = "Tree base", ylim = c(0, 2))
# 624 trees that were relocated and matched
boxplot(diff ~ PlotID, data = plotTrees, main = "Tree base location differences\nBob & Ally", xlab = "Plot number", ylab = "Horizontal difference (m)")
boxplot(diffTop ~ PlotID, data = plotTrees, main = "Tree top location differences\nBob & Ally", xlab = "Plot number", ylab = "Horizontal difference (m)")
# 624 trees that were relocated and matched
boxplot(diff ~ PlotID, data = plotTrees, main = "Tree base location differences\nBob & Ally", xlab = "Plot number", ylab = "Horizontal difference (m)")
boxplot(diffTop ~ PlotID, data = plotTrees, main = "Tree top location differences\nBob & Ally", xlab = "Plot number", ylab = "Horizontal difference (m)")
# compare adjusted locations to original trees
originalPlotTrees <- merge(plotTrees, originalTrees, by.x = "Tree.ID", by.y = "TreeID")
originalPlotTrees$origdiffX.Ally <- originalPlotTrees$X.Ally - originalPlotTrees$Xfield
originalPlotTrees$origdiffY.Ally <- originalPlotTrees$Y.Ally - originalPlotTrees$Yfield
originalPlotTrees$origdiff.Ally <- sqrt(originalPlotTrees$origdiffX.Ally ^ 2 + originalPlotTrees$origdiffY.Ally ^ 2)
originalPlotTrees$origdiffX.Bob <- originalPlotTrees$X.Bob - originalPlotTrees$Xfield
originalPlotTrees$origdiffY.Bob <- originalPlotTrees$Y.Bob - originalPlotTrees$Yfield
originalPlotTrees$origdiff.Bob <- sqrt(originalPlotTrees$origdiffX.Bob ^ 2 + originalPlotTrees$origdiffY.Bob ^ 2)
originalPlotTrees$heightdiff <- abs(originalPlotTrees$Total.Height.Bob - originalPlotTrees$Total.Height.Ally)
boxplot(origdiff.Ally ~ PlotID, data = originalPlotTrees, main = "Tree base location differences\nAlly & Field", ylim = c(0, 8), xlab = "Plot number", ylab = "Horizontal difference (m)")
boxplot(heightdiff ~ PlotID, data = trainingTrees, main = "Tree height difference (Bob - Ally)", ylim = c(0, 1.1), xlab = "Plot number", ylab = "Vertical difference (m)")
?boxplot
boxplot(heightdiff ~ PlotID, data = trainingTrees[trainingTrees$Species == "DF",], main = "Tree height difference (Bob - Ally)", ylim = c(0, 1.1), xlab = "Plot number", ylab = "Vertical difference (m)")
boxplot(heightdiff ~ PlotID, data = trainingTrees[trainingTrees$Species == "PSME",], main = "Tree height difference (Bob - Ally)", ylim = c(0, 1.1), xlab = "Plot number", ylab = "Vertical difference (m)")
boxplot(heightdiff ~ PlotID, data = trainingTrees[trainingTrees$Species == "TSHE",], main = "Tree height difference (Bob - Ally)", ylim = c(0, 1.1), xlab = "Plot number", ylab = "Vertical difference (m)")
boxplot(heightdiff ~ PlotID, data = trainingTrees[trainingTrees$Species == "PSME",], main = "PSME -- Tree height difference (Bob - Ally)", ylim = c(0, 1.1), xlab = "Plot number", ylab = "Vertical difference (m)")
boxplot(heightdiff ~ PlotID, data = trainingTrees[trainingTrees$Species == "TSHE",], main = "TSHE -- Tree height difference (Bob - Ally)", ylim = c(0, 1.1), xlab = "Plot number", ylab = "Vertical difference (m)")
