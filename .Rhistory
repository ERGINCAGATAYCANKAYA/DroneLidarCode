# https://stackoverflow.com/questions/35194048/using-r-how-to-calculate-the-distance-from-one-point-to-a-line
#a <- c(0,0,2) # lidar pt
b <- c(trees$aveBaseX[tree], trees$aveBaseY[tree], trees$aveBaseElevation[tree]) # base
c <- c(trees$aveTopX[tree], trees$aveTopY[tree], trees$topElevation[tree]) # top
#d3 <- dist3d(a,b,c) # distance of point a from line (b,c) in 3D
# build bounding box for tree
xLeft <- min(trees$aveBaseX[tree], trees$aveTopX[tree]) - trees$aveCrownDia[tree] / 2
yBottom <- min(trees$aveBaseY[tree], trees$aveTopY[tree]) - trees$aveCrownDia[tree] / 2
xRight <- max(trees$aveBaseX[tree], trees$aveTopX[tree]) + trees$aveCrownDia[tree] / 2
yTop <- max(trees$aveBaseY[tree], trees$aveTopY[tree]) + trees$aveCrownDia[tree] / 2
tic(paste0("Plot ", folders$Plot_Number[plot], " Tree ", tree, ":Clipping to rough bounding box..."))
tpts <- clip_rectangle(pts, xLeft, yBottom, xRight, yTop)
toc()
tic(paste0("Plot ", folders$Plot_Number[plot], " Tree ", tree, ":Clipping to tree..."))
for (i in 1:tpts@header$`Number of point records`) {
a <- c(tpts@data$X[i], tpts@data$Y[i], tpts@data$Z[i])
d <- dist3d(a,b,c)
if (d <= trees$aveCrownDia[tree] / 2) {
tpts@data$Classification[i] <- 1
}
else {
tpts@data$Classification[i] <- 0
}
}
toc()
# keep only class 1 points
tpts <- filter_poi(tpts, Classification == 1)
# reset the point classification to an integer type, not sure why it was changed
tpts@data$Classification <- as.integer(tpts@data$Classification)
#plot(tpts)
# write tree points
writeLAS(tpts, paste0(pointFolder, "Processing/AdjustedTrees/", "Plot_", trees$Plot_Number[tree], "_Tree_", trees$Tag_Num[tree], ".las"))
}
toc()
}
# need to add code that matches trees on plots to their segmented tree. Ideally, copy the segmented trees to a new folder and relabel
# them to match the labeling used above.
#
# Use a different data file (AdjustedField_T3_Training_TreeTops_AllPlots.csv) that has the basin ID and test to see that I get the same set of trees.
#
# Not sure of the source for the crown widths in the adjusted tree files. I don't remember if
tTrees <- read.csv(file = "extras/AdjustedField_T3_Training_TreeTops_AllPlots.csv", stringsAsFactors = FALSE)
# drop any trees where the base locations differ by more than 1m
distThreshold <- 1
tTrees <- tTrees[tTrees$diff <= distThreshold, ]
# drop trees where we had a height difference of 1m or more
heightThreshold <- 1
tTrees <- tTrees[tTrees$heightdiff <= heightThreshold, ]
for (plot in 1:nrow(folders)) {
trees <- tTrees[tTrees$Plot_Number == folders$Plot_Number[plot],]
pointFolder <- folders$Folder[plot]
# create output folder for new tree clips
verifyFolder(paste0(pointFolder, "Processing/SegmentedTrees"))
for (tree in 1:nrow(trees)) {
file.copy(paste0(pointFolder, "Processing/Trees/TAOpts_GroundBiased/", "Trees_Clip_", sprintf("%07i", trees$BasinID[tree]), ".lda"),
paste0(pointFolder, "Processing/SegmentedTrees/", "Plot_", trees$Plot_Number[tree], "_Tree_", trees$Tag_Num[tree], ".lda"))
}
}
# idea is to clip points using the slanted tree represented by the base and top location
# and a crown diameter. This is done using the directed distance from a line but may require
# some tricks to clip the points below the base location and above the top location.
#
# work through a list of point files and then merge the clips into a single file
#for (plot in 1:1) {
for (plot in 15:nrow(folders)) {
tic(paste0("Clipping trees for plot ", folders$Plot_Number[plot]))
trees <- allTrees[allTrees$Plot_Number == folders$Plot_Number[plot],]
pointFolder <- folders$Folder[plot]
# create output folder for new tree clips
verifyFolder(paste0(pointFolder, "Processing/AdjustedTrees"))
#lazFiles <- list.files(pointFolder, pattern = ".laz")
tic(paste0("Plot ", folders$Plot_Number[plot], ":Reading LAS catalog..."))
pts <- readLAScatalog(pointFolder, select = "*.laz")
toc()
#  for (tree in 1:1) {
for (tree in 1:nrow(trees)) {
# https://stackoverflow.com/questions/35194048/using-r-how-to-calculate-the-distance-from-one-point-to-a-line
#a <- c(0,0,2) # lidar pt
b <- c(trees$aveBaseX[tree], trees$aveBaseY[tree], trees$aveBaseElevation[tree]) # base
c <- c(trees$aveTopX[tree], trees$aveTopY[tree], trees$topElevation[tree]) # top
#d3 <- dist3d(a,b,c) # distance of point a from line (b,c) in 3D
# build bounding box for tree
xLeft <- min(trees$aveBaseX[tree], trees$aveTopX[tree]) - trees$aveCrownDia[tree] / 2
yBottom <- min(trees$aveBaseY[tree], trees$aveTopY[tree]) - trees$aveCrownDia[tree] / 2
xRight <- max(trees$aveBaseX[tree], trees$aveTopX[tree]) + trees$aveCrownDia[tree] / 2
yTop <- max(trees$aveBaseY[tree], trees$aveTopY[tree]) + trees$aveCrownDia[tree] / 2
tic(paste0("Plot ", folders$Plot_Number[plot], " Tree ", tree, ":Clipping to rough bounding box..."))
tpts <- clip_rectangle(pts, xLeft, yBottom, xRight, yTop)
toc()
tic(paste0("Plot ", folders$Plot_Number[plot], " Tree ", tree, ":Clipping to tree..."))
for (i in 1:tpts@header$`Number of point records`) {
a <- c(tpts@data$X[i], tpts@data$Y[i], tpts@data$Z[i])
d <- dist3d(a,b,c)
if (d <= trees$aveCrownDia[tree] / 2) {
tpts@data$Classification[i] <- 1
}
else {
tpts@data$Classification[i] <- 0
}
}
toc()
# keep only class 1 points
tpts <- filter_poi(tpts, Classification == 1)
# reset the point classification to an integer type, not sure why it was changed
tpts@data$Classification <- as.integer(tpts@data$Classification)
#plot(tpts)
# write tree points
writeLAS(tpts, paste0(pointFolder, "Processing/AdjustedTrees/", "Plot_", trees$Plot_Number[tree], "_Tree_", trees$Tag_Num[tree], ".las"))
}
toc()
}
tTrees <- read.csv(file = "extras/AdjustedField_T3_Training_TreeTops_AllPlots.csv", stringsAsFactors = FALSE)
# drop any trees where the base locations differ by more than 1m
distThreshold <- 1
tTrees <- tTrees[tTrees$diff <= distThreshold, ]
# drop trees where we had a height difference of 1m or more
heightThreshold <- 1
tTrees <- tTrees[tTrees$heightdiff <= heightThreshold, ]
for (plot in 1:nrow(folders)) {
trees <- tTrees[tTrees$Plot_Number == folders$Plot_Number[plot],]
pointFolder <- folders$Folder[plot]
# create output folder for new tree clips
verifyFolder(paste0(pointFolder, "Processing/SegmentedTrees"))
for (tree in 1:nrow(trees)) {
file.copy(paste0(pointFolder, "Processing/Trees/TAOpts_GroundBiased/", "Trees_Clip_", sprintf("%07i", trees$BasinID[tree]), ".lda"),
paste0(pointFolder, "Processing/SegmentedTrees/", "Plot_", trees$Plot_Number[tree], "_Tree_", trees$Tag_Num[tree], ".lda"),
overwrite = TRUE)
}
}
folders$Plot_Number[plot]
View(trees)
View(tTrees)
View(allTrees)
allTrees <- read.csv(file = "extras/AdjustedTrees_AllPlots.csv", stringsAsFactors = FALSE)
# drop any trees where the base locations differ by more than 1m
distThreshold <- 1
allTrees <- allTrees[allTrees$diff <= distThreshold, ]
# drop trees where we had a height difference of 1m or more
heightThreshold <- 1
allTrees <- allTrees[allTrees$heightdiff <= heightThreshold, ]
# compute averages
allTrees$aveBaseX <- (allTrees$X.Ally + allTrees$X.Bob) / 2
allTrees$aveBaseY <- (allTrees$Y.Ally + allTrees$Y.Bob) / 2
allTrees$aveBaseElevation <- (allTrees$Elevation.Ally + allTrees$Elevation.Bob) / 2
allTrees$aveHeight <- (allTrees$Total.Height.Ally + allTrees$Total.Height.Bob) / 2
for (i in 1:nrow(allTrees)) {
if (allTrees$Elevation.Ally[i] < 0 || allTrees$Elevation.Bob[i] < 0) {
allTrees$aveBaseElevation[i] <- max(allTrees$Elevation.Ally[i], allTrees$Elevation.Bob[i])
}
}
allTrees$aveTopX <- (allTrees$TopX.Ally + allTrees$TopX.Bob) / 2
allTrees$aveTopY <- (allTrees$TopY.Ally + allTrees$TopY.Bob) / 2
allTrees$topElevation <- allTrees$aveBaseElevation + allTrees$aveHeight
allTrees$aveCrownDia <- (allTrees$Max.Crown.Diameter.Ally + allTrees$Max.Crown.Diameter.Bob + allTrees$Min.Crown.Diameter.Ally + allTrees$Min.Crown.Diameter.Bob) / 4
tTrees <- read.csv(file = "extras/AdjustedField_T3_Training_TreeTops_AllPlots.csv", stringsAsFactors = FALSE)
# drop any trees where the base locations differ by more than 1m
distThreshold <- 1
tTrees <- tTrees[tTrees$diff <= distThreshold, ]
# drop trees where we had a height difference of 1m or more
heightThreshold <- 1
tTrees <- tTrees[tTrees$heightdiff <= heightThreshold, ]
View(trees)
?setGlobalCommandOptions
allTrees <- read.csv(file = "extras/AdjustedTrees_AllPlots.csv", stringsAsFactors = FALSE)
# drop any trees where the base locations differ by more than 1m
distThreshold <- 1
allTrees <- allTrees[allTrees$diff <= distThreshold, ]
# drop trees where we had a height difference of 1m or more
heightThreshold <- 1
allTrees <- allTrees[allTrees$heightdiff <= heightThreshold, ]
# compute averages
allTrees$aveBaseX <- (allTrees$X.Ally + allTrees$X.Bob) / 2
allTrees$aveBaseY <- (allTrees$Y.Ally + allTrees$Y.Bob) / 2
allTrees$aveBaseElevation <- (allTrees$Elevation.Ally + allTrees$Elevation.Bob) / 2
allTrees$aveHeight <- (allTrees$Total.Height.Ally + allTrees$Total.Height.Bob) / 2
for (i in 1:nrow(allTrees)) {
if (allTrees$Elevation.Ally[i] < 0 || allTrees$Elevation.Bob[i] < 0) {
allTrees$aveBaseElevation[i] <- max(allTrees$Elevation.Ally[i], allTrees$Elevation.Bob[i])
}
}
allTrees$aveTopX <- (allTrees$TopX.Ally + allTrees$TopX.Bob) / 2
allTrees$aveTopY <- (allTrees$TopY.Ally + allTrees$TopY.Bob) / 2
allTrees$topElevation <- allTrees$aveBaseElevation + allTrees$aveHeight
allTrees$aveCrownDia <- (allTrees$Max.Crown.Diameter.Ally + allTrees$Max.Crown.Diameter.Bob + allTrees$Min.Crown.Diameter.Ally + allTrees$Min.Crown.Diameter.Bob) / 4
# reset options
resetGlobalCommandOptions()
# set default behavior for commands
setGlobalCommandOptions(runCmd = TRUE, saveCmd = FALSE, echoCmd = FALSE)
# work through the folders and run metrics for adjusted tree clips
for (plot in 1:1) {
#  for (plot in 1:nrow(folders)) {
tic(paste0("Computing metrics for plot ", folders$Plot_Number[plot]))
pointFolder <- folders$Folder[plot]
# create output folder for new tree clips
outFile <- paste0(pointFolder, "Processing/AdjustedTrees/metrics.csv")
CloudMetrics(paste0(pointFolder, "Processing/AdjustedTrees", "*.las")
, outFile
, new = TRUE
, rid = TRUE
)
}
# work through the folders and run metrics for adjusted tree clips
for (plot in 1:1) {
#  for (plot in 1:nrow(folders)) {
tic(paste0("Computing metrics for plot ", folders$Plot_Number[plot]))
pointFolder <- folders$Folder[plot]
# create output folder for new tree clips
outFile <- paste0(pointFolder, "Processing/AdjustedTrees/metrics.csv")
CloudMetrics(paste0(pointFolder, "Processing/AdjustedTrees/", "*.las")
, outFile
, new = TRUE
, rid = TRUE
)
}
topDepth <- 3
# work through the folders and run metrics for adjusted tree clips
for (plot in 1:1) {
#  for (plot in 1:nrow(folders)) {
tic(paste0("Computing metrics for plot ", folders$Plot_Number[plot]))
pointFolder <- folders$Folder[plot]
# ***** add new clipping to smaller cylinder
# create output folder for new tree clips
outFile <- paste0(pointFolder, "Processing/AdjustedTrees/metrics.csv")
CloudMetrics(paste0(pointFolder, "Processing/AdjustedTrees/", "*.las")
, outFile
, new = TRUE
, rid = TRUE
)
# read the metrics to get the high point
# read the metrics for the non-normalized points and get the highest elevation
m <- read.csv(outFile, stringsAsFactors = FALSE)
# compute the elevation for the base of the upper portion
m$SampleBaseElev <- m$Elev.maximum - topDepth
# build commands to clip to upper portion of each TAO
for (i in 1:nrow(m)) {
ClipData(m$DataFile[i]
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops/", m$FileTitle[i], ".las")
, zmin = m$SampleBaseElev[i]
, zmax = m$Elev.maximum[i]
)
}
# use the lower elevation value to normalize the upper crown points using ClipData and the /biaselev:minelevation option
# bias is added to point height so it needs to be negative
# zmin and zmax are evaluated after bias adjustment so zmin=0 and zmax=topDepth
for (i in 1:nrow(m)) {
ClipData(m$DataFile[i]
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized/", m$FileTitle[i], ".las")
, zmin = 0
, zmax = topDepth
, biaselev = -m$SampleBaseElev[i]
)
}
# compute metrics for tree tops...use rid=TRUE to parse tree number from end of point file name
CloudMetrics(paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized/", "*.las")
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized/", "/TreeTops_normalized_metrics.csv")
, new = TRUE
, rid = TRUE
)
}
# merge metrics and field data
merged <- merge(allTrees, m, by.x = "Tag_Num", by.y = "Identifier")
# merge metrics and field data
merged <- merge(allTrees, m, by.x = c("Plot_Number", "Tag_Num"), by.y = c(folders$Plot_Number, "Identifier"))
m <- read.csv(paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized/", "/TreeTops_normalized_metrics.csv", stringsAsFactors = FALSE))
m <- read.csv(paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized", "/TreeTops_normalized_metrics.csv", stringsAsFactors = FALSE))
m <- read.csv(paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized", "/TreeTops_normalized_metrics.csv"), stringsAsFactors = FALSE)
m$Plot_Number <- folders$Plot_Number
m <- read.csv(paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized", "/TreeTops_normalized_metrics.csv"), stringsAsFactors = FALSE)
m$Plot_Number <- folders$Plot_Number
m$Plot_Number <- folders$Plot_Number[plot]
# merge metrics and field data
merged <- merge(allTrees, m, by.x = c("Plot_Number", "Tag_Num"), by.y = c("Plot_Number", "Identifier"))
write.csv(merged, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized", "/Leaning_TreeTops_normalized_metrics_Plot", folders$Plot_Number[plot], ".csv"), row.names = FALSE)
write.csv(merged, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized", "/Leaning_TreeTops_normalized_metrics_Plot", sprintf("%02i", folders$Plot_Number[plot]), ".csv"), row.names = FALSE)
# work through the folders and run metrics for adjusted tree clips
for (plot in 1:2) {
#  for (plot in 1:nrow(folders)) {
tic(paste0("Computing metrics for plot ", folders$Plot_Number[plot]))
pointFolder <- folders$Folder[plot]
# ***** add new clipping to smaller cylinder
# create output folder for new tree clips
outFile <- paste0(pointFolder, "Processing/AdjustedTrees/metrics.csv")
CloudMetrics(paste0(pointFolder, "Processing/AdjustedTrees/", "*.las")
, outFile
, new = TRUE
, rid = TRUE
)
# read the metrics to get the high point
# read the metrics for the non-normalized points and get the highest elevation
m <- read.csv(outFile, stringsAsFactors = FALSE)
# compute the elevation for the base of the upper portion
m$SampleBaseElev <- m$Elev.maximum - topDepth
# build commands to clip to upper portion of each TAO
for (i in 1:nrow(m)) {
ClipData(m$DataFile[i]
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops/", m$FileTitle[i], ".las")
, zmin = m$SampleBaseElev[i]
, zmax = m$Elev.maximum[i]
)
}
# use the lower elevation value to normalize the upper crown points using ClipData and the /biaselev:minelevation option
# bias is added to point height so it needs to be negative
# zmin and zmax are evaluated after bias adjustment so zmin=0 and zmax=topDepth
for (i in 1:nrow(m)) {
ClipData(m$DataFile[i]
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized/", m$FileTitle[i], ".las")
, zmin = 0
, zmax = topDepth
, biaselev = -m$SampleBaseElev[i]
)
}
# compute metrics for tree tops...use rid=TRUE to parse tree number from end of point file name
CloudMetrics(paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized/", "*.las")
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized", "/TreeTops_normalized_metrics.csv")
, new = TRUE
, rid = TRUE
)
m <- read.csv(paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized", "/TreeTops_normalized_metrics.csv"), stringsAsFactors = FALSE)
m$Plot_Number <- folders$Plot_Number[plot]
# merge metrics and field data
merged <- merge(allTrees, m, by.x = c("Plot_Number", "Tag_Num"), by.y = c("Plot_Number", "Identifier"))
write.csv(merged, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized",
"/Leaning_TreeTops_normalized_metrics_Plot",
sprintf("%02i", folders$Plot_Number[plot]), ".csv"), row.names = FALSE)
if (plot == 1) {
allMerged <- merged
}
else {
allMerged <- rbind(allMerged, merged)
}
}
# write off combined file
write.csv(merged, paste0("D:/T3_DroneLidar", "/Leaning_TreeTops_normalized_metrics.csv"), row.names = FALSE)
# clean up folder list so we only have one instance of each folder
u <- unique(folders$Folder)
# work through the folders and run metrics for adjusted tree clips
for (plot in 1:2) {
#  for (plot in 1:nrow(folders)) {
tic(paste0("Computing metrics for plot ", folders$Plot_Number[plot]))
pointFolder <- folders$Folder[plot]
# ***** add new clipping to smaller cylinder
# create output folder for new tree clips
outFile <- paste0(pointFolder, "Processing/AdjustedTrees/metrics.csv")
CloudMetrics(paste0(pointFolder, "Processing/AdjustedTrees/", "Plot_", trees$Plot_Number[tree], "*.las")
, outFile
, new = TRUE
, rid = TRUE
)
# read the metrics to get the high point
# read the metrics for the non-normalized points and get the highest elevation
m <- read.csv(outFile, stringsAsFactors = FALSE)
# compute the elevation for the base of the upper portion
m$SampleBaseElev <- m$Elev.maximum - topDepth
# build commands to clip to upper portion of each TAO
for (i in 1:nrow(m)) {
ClipData(m$DataFile[i]
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops/", m$FileTitle[i], ".las")
, zmin = m$SampleBaseElev[i]
, zmax = m$Elev.maximum[i]
)
}
# use the lower elevation value to normalize the upper crown points using ClipData and the /biaselev:minelevation option
# bias is added to point height so it needs to be negative
# zmin and zmax are evaluated after bias adjustment so zmin=0 and zmax=topDepth
for (i in 1:nrow(m)) {
ClipData(m$DataFile[i]
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized/", m$FileTitle[i], ".las")
, zmin = 0
, zmax = topDepth
, biaselev = -m$SampleBaseElev[i]
)
}
# compute metrics for tree tops...use rid=TRUE to parse tree number from end of point file name
CloudMetrics(paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized/", "Plot_", trees$Plot_Number[tree], "*.las")
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized", "/TreeTops_normalized_metrics.csv")
, new = TRUE
, rid = TRUE
)
m <- read.csv(paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized", "/TreeTops_normalized_metrics.csv"), stringsAsFactors = FALSE)
m$Plot_Number <- folders$Plot_Number[plot]
# merge metrics and field data
merged <- merge(allTrees, m, by.x = c("Plot_Number", "Tag_Num"), by.y = c("Plot_Number", "Identifier"))
write.csv(merged, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized",
"/Leaning_TreeTops_normalized_metrics_Plot",
sprintf("%02i", folders$Plot_Number[plot]), ".csv"), row.names = FALSE)
if (plot == 1) {
allMerged <- merged
}
else {
allMerged <- rbind(allMerged, merged)
}
}
# work through the folders and run metrics for adjusted tree clips
for (plot in 1:2) {
#  for (plot in 1:nrow(folders)) {
tic(paste0("Computing metrics for plot ", folders$Plot_Number[plot]))
pointFolder <- folders$Folder[plot]
# ***** add new clipping to smaller cylinder
# create output folder for new tree clips
outFile <- paste0(pointFolder, "Processing/AdjustedTrees/metrics.csv")
CloudMetrics(paste0(pointFolder, "Processing/AdjustedTrees/", "Plot_", folders$Plot_Number[plot], "*.las")
, outFile
, new = TRUE
, rid = TRUE
)
# read the metrics to get the high point
# read the metrics for the non-normalized points and get the highest elevation
m <- read.csv(outFile, stringsAsFactors = FALSE)
# compute the elevation for the base of the upper portion
m$SampleBaseElev <- m$Elev.maximum - topDepth
# build commands to clip to upper portion of each TAO
for (i in 1:nrow(m)) {
ClipData(m$DataFile[i]
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops/", m$FileTitle[i], ".las")
, zmin = m$SampleBaseElev[i]
, zmax = m$Elev.maximum[i]
)
}
# use the lower elevation value to normalize the upper crown points using ClipData and the /biaselev:minelevation option
# bias is added to point height so it needs to be negative
# zmin and zmax are evaluated after bias adjustment so zmin=0 and zmax=topDepth
for (i in 1:nrow(m)) {
ClipData(m$DataFile[i]
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized/", m$FileTitle[i], ".las")
, zmin = 0
, zmax = topDepth
, biaselev = -m$SampleBaseElev[i]
)
}
# compute metrics for tree tops...use rid=TRUE to parse tree number from end of point file name
CloudMetrics(paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized/", "Plot_", folders$Plot_Number[plot], "*.las")
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized", "/TreeTops_normalized_metrics.csv")
, new = TRUE
, rid = TRUE
)
m <- read.csv(paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized", "/TreeTops_normalized_metrics.csv"), stringsAsFactors = FALSE)
m$Plot_Number <- folders$Plot_Number[plot]
# merge metrics and field data
merged <- merge(allTrees, m, by.x = c("Plot_Number", "Tag_Num"), by.y = c("Plot_Number", "Identifier"))
write.csv(merged, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized",
"/Leaning_TreeTops_normalized_metrics_Plot",
sprintf("%02i", folders$Plot_Number[plot]), ".csv"), row.names = FALSE)
if (plot == 1) {
allMerged <- merged
}
else {
allMerged <- rbind(allMerged, merged)
}
}
# write off combined file
write.csv(allmerged, paste0("D:/T3_DroneLidar", "/Leaning_TreeTops_normalized_metrics.csv"), row.names = FALSE)
# write off combined file
write.csv(allMerged, paste0("D:/T3_DroneLidar", "/Leaning_TreeTops_normalized_metrics.csv"), row.names = FALSE)
# work through the folders and run metrics for adjusted tree clips
#for (plot in 1:2) {
for (plot in 1:nrow(folders)) {
tic(paste0("Computing metrics for plot ", folders$Plot_Number[plot]))
pointFolder <- folders$Folder[plot]
# ***** add new clipping to smaller cylinder
# create output folder for new tree clips
outFile <- paste0(pointFolder, "Processing/AdjustedTrees/metrics.csv")
CloudMetrics(paste0(pointFolder, "Processing/AdjustedTrees/", "Plot_", folders$Plot_Number[plot], "*.las")
, outFile
, new = TRUE
, rid = TRUE
)
# read the metrics to get the high point
# read the metrics for the non-normalized points and get the highest elevation
m <- read.csv(outFile, stringsAsFactors = FALSE)
# compute the elevation for the base of the upper portion
m$SampleBaseElev <- m$Elev.maximum - topDepth
# build commands to clip to upper portion of each TAO
for (i in 1:nrow(m)) {
ClipData(m$DataFile[i]
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops/", m$FileTitle[i], ".las")
, zmin = m$SampleBaseElev[i]
, zmax = m$Elev.maximum[i]
)
}
# use the lower elevation value to normalize the upper crown points using ClipData and the /biaselev:minelevation option
# bias is added to point height so it needs to be negative
# zmin and zmax are evaluated after bias adjustment so zmin=0 and zmax=topDepth
for (i in 1:nrow(m)) {
ClipData(m$DataFile[i]
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized/", m$FileTitle[i], ".las")
, zmin = 0
, zmax = topDepth
, biaselev = -m$SampleBaseElev[i]
)
}
# compute metrics for tree tops...use rid=TRUE to parse tree number from end of point file name
CloudMetrics(paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized/", "Plot_", folders$Plot_Number[plot], "*.las")
, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized", "/TreeTops_normalized_metrics.csv")
, new = TRUE
, rid = TRUE
)
m <- read.csv(paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized", "/TreeTops_normalized_metrics.csv"), stringsAsFactors = FALSE)
m$Plot_Number <- folders$Plot_Number[plot]
# merge metrics and field data
merged <- merge(allTrees, m, by.x = c("Plot_Number", "Tag_Num"), by.y = c("Plot_Number", "Identifier"))
write.csv(merged, paste0(pointFolder, "Processing/AdjustedTrees/TreeTops_normalized",
"/Leaning_TreeTops_normalized_metrics_Plot",
sprintf("%02i", folders$Plot_Number[plot]), ".csv"), row.names = FALSE)
if (plot == 1) {
allMerged <- merged
}
else {
allMerged <- rbind(allMerged, merged)
}
}
# write off combined file
write.csv(allMerged, paste0("D:/T3_DroneLidar", "/Leaning_TreeTops_normalized_metrics.csv"), row.names = FALSE)
