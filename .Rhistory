# -work plot-by-plot
# -read all of Ally's plots, then work across all plots
adjustedTreesAlly <- data.frame()
for (i in 1:length(plotNumbers)) {
#  i <- 1
# make sure file exists
if (file.exists(paste0(outputFolder, "/Plot_", plotNumbers[i], "_Field_FUSIONtrees.csv"))) {
# read Ally's trees
t <- read.csv(file = paste0(outputFolder, "/Plot_", plotNumbers[i], "_Field_FUSIONtrees.csv"), stringsAsFactors = FALSE)
adjustedTreesAlly <- rbind(adjustedTreesAlly, t)
}
}
# compute top location
adjustedTreesAlly$TopX <- adjustedTreesAlly$X + (cos((450 - adjustedTreesAlly$Lean.Azimuth) * pi / 180.0) * sin(adjustedTreesAlly$Lean.Angle * pi / 180.0) * adjustedTreesAlly$Total.Height)
adjustedTreesAlly$TopY <- adjustedTreesAlly$Y + (sin((450 - adjustedTreesAlly$Lean.Azimuth) * pi / 180.0) * sin(adjustedTreesAlly$Lean.Angle * pi / 180.0) * adjustedTreesAlly$Total.Height)
# match trees by identifier
plotTrees <- merge(adjustedTreesAlly, adjustedTreesBob, by = "Tree.ID", all = FALSE, suffixes = c(".Ally", ".Bob"))
# 1528 trees that were matched
# compute difference in base and top location
plotTrees$diffX <- plotTrees$X.Ally - plotTrees$X.Bob
plotTrees$diffY <- plotTrees$Y.Ally - plotTrees$Y.Bob
plotTrees$diffTopX <- plotTrees$TopX.Ally - plotTrees$TopX.Bob
plotTrees$diffTopY <- plotTrees$TopY.Ally - plotTrees$TopY.Bob
plotTrees$diff <- sqrt(plotTrees$diffX ^ 2 + plotTrees$diffY ^ 2)
plotTrees$diffTop <- sqrt(plotTrees$diffTopX ^ 2 + plotTrees$diffTopY ^ 2)
# build a plot number
plotTrees$PlotID <- as.factor(substr(plotTrees$Tree.ID, 1, 2))
# drop all but trees with status code = 0...these are the trees we adjusted
plotTrees <- plotTrees[plotTrees$Status.Code.Ally == 0, ]
plotTrees <- plotTrees[plotTrees$Status.Code.Bob == 0, ]
# 624 trees that were relocated and matched
# compare adjusted locations to original trees
originalPlotTrees <- merge(plotTrees, originalTrees, by.x = "Tree.ID", by.y = "TreeID")
originalPlotTrees$origdiffX.Ally <- originalPlotTrees$X.Ally - originalPlotTrees$Xfield
originalPlotTrees$origdiffY.Ally <- originalPlotTrees$Y.Ally - originalPlotTrees$Yfield
originalPlotTrees$origdiff.Ally <- sqrt(originalPlotTrees$origdiffX.Ally ^ 2 + originalPlotTrees$origdiffY.Ally ^ 2)
originalPlotTrees$origdiffX.Bob <- originalPlotTrees$X.Bob - originalPlotTrees$Xfield
originalPlotTrees$origdiffY.Bob <- originalPlotTrees$Y.Bob - originalPlotTrees$Yfield
originalPlotTrees$origdiff.Bob <- sqrt(originalPlotTrees$origdiffX.Bob ^ 2 + originalPlotTrees$origdiffY.Bob ^ 2)
originalPlotTrees$heightdiff <- abs(originalPlotTrees$Total.Height.Bob - originalPlotTrees$Total.Height.Ally)
# write off data into the extras folder in the repository
write.csv(originalPlotTrees, "../extras/TrainingTrees_Field_AllPlots.csv", row.names = FALSE)
# write off data into the extras folder in the repository
write.csv(originalPlotTrees, "extras/TrainingTrees_Field_AllPlots.csv", row.names = FALSE)
# read data...start here if working with the data. Repository doesn't have the tree data adjusted by Ally & Bob in the form needed for the code above
originalPlotTrees <- read.csv(file = "extras/TrainingTrees_Field_AllPlots.csv", stringsAsFactors = FALSE)
# write off data into the extras folder in the repository
write.csv(originalPlotTrees, "extras/AdjustedTrees_AllPlots.csv", row.names = FALSE)
# *****************************************************************************
# *****************************************************************************
# *****************************************************************************
# *****************************************************************************
# read data...start here if working with the data. Repository doesn't have the tree data adjusted by Ally & Bob in the form needed for the code above
originalPlotTrees <- read.csv(file = "extras/AdjustedTrees_AllPlots.csv", stringsAsFactors = FALSE)
boxplot(diff ~ PlotID, data = originalPlotTrees, main = "Tree base location differences\nBob & Ally", xlab = "Plot number", ylab = "Horizontal difference (m)")
boxplot(diffTop ~ PlotID, data = originalPlotTrees, main = "Tree top location differences\nBob & Ally", xlab = "Plot number", ylab = "Horizontal difference (m)")
hist(originalPlotTrees$diff)
boxplot(origdiff.Ally ~ PlotID, data = originalPlotTrees, main = "Tree base location differences\nAlly & Field", ylim = c(0, 8), xlab = "Plot number", ylab = "Horizontal difference (m)")
boxplot(origdiff.Bob ~ PlotID, data = originalPlotTrees, main = "Tree base location differences\nBob & Field", ylim = c(0, 8), xlab = "Plot number", ylab = "Horizontal difference (m)")
boxplot(heightdiff ~ PlotID, data = originalPlotTrees, main = "Tree height difference\nBob & Ally", ylim = c(0, 8), xlab = "Plot number", ylab = "Vertical difference (m)")
hist(originalPlotTrees$diffTop)
nrows(originalPlotTrees)
nrow(originalPlotTrees)
originalPlotTrees <- read.csv(file = "extras/AdjustedTrees_AllPlots.csv", stringsAsFactors = FALSE)
originalPlotTrees <- read.csv(file = "../extras/AdjustedTrees_AllPlots.csv", stringsAsFactors = FALSE)
par(mfrow=c(1,2))
boxplot(diff ~ PlotID, data = originalPlotTrees, main = "Tree base location differences\nBob & Ally", xlab = "Plot number", ylab = "Horizontal difference (m)")
boxplot(diffTop ~ PlotID, data = originalPlotTrees, main = "Tree top location differences\nBob & Ally", xlab = "Plot number", ylab = "Horizontal difference (m)")
par(mfrow=c(1,1))
hist(originalPlotTrees$diff, main = "Tree base location difference (m)")
hist(originalPlotTrees$diffTop, main = "Tree top location difference (m)")
par(mfrow=c(1,2))
hist(originalPlotTrees$diff, main = "Tree base location difference (m)")
hist(originalPlotTrees$diffTop, main = "Tree top location difference (m)")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(origdiff.Ally ~ PlotID, data = originalPlotTrees
, main = "Tree base location differences\nAlly & Field"
, ylim = c(0, 8)
, xlab = "Plot number"
, ylab = "Horizontal difference (m)")
boxplot(origdiff.Bob ~ PlotID, data = originalPlotTrees
, main = "Tree base location differences\nBob & Field"
, ylim = c(0, 8)
, xlab = "Plot number"
, ylab = "Horizontal difference (m)")
par(mfrow=c(1,1))
boxplot(origdiff.Ally ~ PlotID, data = originalPlotTrees, main = "Tree base location differences\nAlly & Field", ylim = c(0, 8), xlab = "Plot number", ylab = "Horizontal difference (m)")
boxplot(origdiff.Bob ~ PlotID, data = originalPlotTrees, main = "Tree base location differences\nBob & Field", ylim = c(0, 8), xlab = "Plot number", ylab = "Horizontal difference (m)")
boxplot(heightdiff ~ PlotID, data = originalPlotTrees
, main = "Tree height difference\nBob & Ally"
, ylim = c(0, 8)
, xlab = "Plot number"
, ylab = "Vertical difference (m)")
boxplot(heightdiff ~ PlotID, data = originalPlotTrees
, main = "Tree height difference\nBob & Ally"
, ylim = c(0, 8)
, xlab = "Plot number"
, ylab = "Vertical difference (m)")
# drop any trees where the base locations differ by more than 1m
distThreshold <- 1
trainingTrees <- originalPlotTrees[originalPlotTrees$diff <= distThreshold, ]
#580 trees after filtering to remove trees with horizontal position differences > 1m
# height differences between Ally & Bob for trees within 1m
boxplot(heightdiff ~ PlotID, data = trainingTrees
, main = "Tree height difference\nBob & Ally"
, ylim = c(0, 8)
, xlab = "Plot number"
, ylab = "Vertical difference (m)")
heightThreshold <- 1
trainingTrees <- trainingTrees[trainingTrees$heightdiff <= heightThreshold, ]
# 575 trees after filtering based on location and height difference thresholds
# height difference between Bob & Ally for final trees
boxplot(heightdiff ~ PlotID, data = trainingTrees
, main = "Tree height difference (Bob - Ally)"
, ylim = c(0, 1.1)
, xlab = "Plot number"
, ylab = "Vertical difference (m)")
par(mfrow=c(1,2))
boxplot(heightdiff ~ PlotID, data = trainingTrees[trainingTrees$Species == "PSME",]
, main = "PSME -- Tree height difference (Bob - Ally)"
, ylim = c(0, 1.1)
, xlab = "Plot number"
, ylab = "Vertical difference (m)")
boxplot(heightdiff ~ PlotID, data = trainingTrees[trainingTrees$Species == "TSHE",]
, main = "TSHE -- Tree height difference (Bob - Ally)"
, ylim = c(0, 1.1)
, xlab = "Plot number"
, ylab = "Vertical difference (m)")
par(mfrow=c(1,1))
hist(heightdiff ~ PlotID)
?hist
knitr::opts_chunk$set(
echo    = as.logical(params$show_code),
message = FALSE,
warning = FALSE,
fig.height = 9,
fig.width = 6
)
library(sf)
library(dplyr)
library(kableExtra)
library(lidR)
library(ForestGapR)
library(mapview)
library(fusionwrapr)
# *****************************************************************************
# this is a modified version of the getForestGaps function from ForestGapR
# this finds clumps above the threshold height
# *****************************************************************************
getForestClumps <- function(chm_layer, threshold = 10, size = c(1, 10^4)) {
chm_layer[chm_layer < threshold] <- NA
chm_layer[chm_layer >= threshold] <- 1
clumps <- raster::clump(chm_layer, directions = 8, gap = FALSE)
rcl <- raster::freq(clumps)
rcl[, 2] <- rcl[, 2] * raster::res(chm_layer)[1]^2
rcl <- cbind(rcl[, 1], rcl)
z <- raster::reclassify(clumps, rcl = rcl, right = NA)
z[is.na(clumps)] <- NA
clumps[z > size[2]] <- NA
clumps[z < size[1]] <- NA
clumps <- raster::clump(clumps, directions = 8, gap = FALSE)
names(clumps) <- "clumps"
return(clumps)
}
# function to predict height (m) given a DBH (cm)
# DBH can be in inches with conversionFactor = 1.0 but height will still be returned in meters
predictHeight <- function(spp, DBH, conversionFactor = 2.54) {
# coefficients from:
# Hanus, M.L., D.D. Marshall, and D.W. Hann. 1999. Height-diameter equations for six
# species in the coastal regions of the Pacific Northwest.  Forestry Research
# Laboratory, contribution 25.  11 p.
# Ht = 4.5 + exp(a0 + a1 * DBH^a2)
# DBH = (ln((Ht - 4.5) / exp(a0)) / a1)^(1 / a2)
# Ht is in feet and DBH is in inches...hence the need for the conversion factor
species <- c("PSME", "ALRU", "PISI", "TSHE", "THPL", "PIMO")
a0 <- c(7.262195456, 4.41820972,  5.404491308, 6.555344622, 7.232880669, 7.946192109)
a1 <- c(-5.899759104, -12.00274935, -6.570862442, -5.137174162, -5.746899904, -6.278973035)
a2 <- c(-0.287207389, -2.13835482,  -0.819705048, -0.3645508,   -0.271564741, -0.208892429)
# match spp
sppIndex <- which(species == spp)
if (length(sppIndex) == 0)
stop("Invalid species...must be one of: ", paste(species, collapse = ","))
Ht = 4.5 + exp(a0[sppIndex] + a1[sppIndex] * (DBH / conversionFactor)^(a2[sppIndex]))
return(Ht / 3.2808)
}
# function to predict DBH (cm) given a height (m)
# height can be in feet with conversionFactor = 1.0 but DBH will still be returned in cm
predictDBH <- function(spp, height, conversionFactor = 3.2808) {
# coefficients from:
# Hanus, M.L., D.D. Marshall, and D.W. Hann. 1999. Height-diameter equations for six
# species in the coastal regions of the Pacific Northwest.  Forestry Research
# Laboratory, contribution 25.  11 p.
# Ht = 4.5 + exp(a0 + a1 * DBH^a2)
# DBH = (ln((Ht - 4.5) / exp(a0)) / a1)^(1 / a2)
# Ht is in feet and DBH is in inches...hence the need for the conversion factor
species <- c("PSME", "ALRU", "PISI", "TSHE", "THPL", "PIMO")
a0 <- c(7.262195456, 4.41820972,  5.404491308, 6.555344622, 7.232880669, 7.946192109)
a1 <- c(-5.899759104, -12.00274935, -6.570862442, -5.137174162, -5.746899904, -6.278973035)
a2 <- c(-0.287207389, -2.13835482,  -0.819705048, -0.3645508,   -0.271564741, -0.208892429)
# match spp
sppIndex <- which(species == spp)
if (length(sppIndex) == 0)
stop("Invalid species...must be one of: ", paste(species, collapse = ","))
DBH <- (log((height*conversionFactor - 4.5) / exp(a0[sppIndex])) / a1[sppIndex])^(1 / a2[sppIndex])
return(DBH * 2.54)
}
# load polygon and generate map with ortho imagery
polyFile <- params$polyFile
polys <- st_read(polyFile, quiet = TRUE)
poly <- dplyr::filter(polys, Strategy == params$Strategy & Sub_unit == params$Sub_unit & Rx == params$Rx)
# project to UTM zone 10 to match drone lidar data
poly <- st_transform(poly, 26910)
# needed to prevent error while rendering
mapviewOptions(fgb = FALSE)
# render to object
x <- mapview(poly
, map.types = c("Esri.WorldImagery")
, layer.name = paste0(params$Strategy, "--", params$Sub_unit, "--", params$Rx)
, col = "white"
, col.regions = "grey80"
, lwd = 2
, alpha.regions = 0.2
)
# save image of map
mapshot(x
, file = paste0(params$Strategy, "--", params$Sub_unit, "--", params$Rx, ".png")
, remove_controls = c("zoomControl", "layersControl", "homeButton",
"drawToolbar", "easyButton")
)
# load CHM
chm <- readDTM(paste0(params$baseFolder, "/Polygon", "/CHM.dtm"), type = "raster")
# colors for CHM plot
col <- height.colors(50)
# create mask...areas at or above threshold
# @@@@ may be a better way to do this so we don't risk losing really large areas
mask <- getForestClumps(chm_layer=chm, threshold=0.0, size=c(0.1, 100000000))
mask_stats<-GapStats(gap_layer=mask, chm_layer=chm)
maskArea <- sum(mask_stats$gap_area)
layout(matrix(c(1,2), nrow = 2, ncol = 1))
par(mar=c(2, 2, 2, 2))
# plot CHM with color ramp...add polygon
plot(chm, col = col, asp = 1, main = "Canopy height", legend = FALSE)
plot(st_geometry(poly), col = NA, border = "black", add = TRUE, legend = FALSE)
plot(chm, col = col, asp = 1, main = "Canopy height", legend.only = TRUE, horizontal = FALSE)
plot(mask, col = "green", asp = 1, main = "Vegetation mask", legend = FALSE)
plot(st_geometry(poly), col = NA, border = "black", add = TRUE, legend = FALSE)
# compute values from CHM...used for thresholds
# produce histogram with vertical lines for height thresholds
maxht <- cellStats(chm, "max")
qs <- quantile(chm, probs = c(0.25, 0.5, 0.75))
?cellStaTS
?cellStats
library(raster)
# compute values from CHM...used for thresholds
# produce histogram with vertical lines for height thresholds
maxht <- cellStats(chm, "max")
meanht <- cellStats(chm, "mean")
qs <- quantile(chm, probs = c(0.25, 0.5, 0.75))
knitr::opts_chunk$set(
echo    = as.logical(params$show_code),
message = FALSE,
warning = FALSE,
fig.height = 9,
fig.width = 6
)
library(sf)
library(dplyr)
library(kableExtra)
library(lidR)
library(raster)
library(ForestGapR)
library(mapview)
library(fusionwrapr)
# *****************************************************************************
# this is a modified version of the getForestGaps function from ForestGapR
# this finds clumps above the threshold height
# *****************************************************************************
getForestClumps <- function(chm_layer, threshold = 10, size = c(1, 10^4)) {
chm_layer[chm_layer < threshold] <- NA
chm_layer[chm_layer >= threshold] <- 1
clumps <- raster::clump(chm_layer, directions = 8, gap = FALSE)
rcl <- raster::freq(clumps)
rcl[, 2] <- rcl[, 2] * raster::res(chm_layer)[1]^2
rcl <- cbind(rcl[, 1], rcl)
z <- raster::reclassify(clumps, rcl = rcl, right = NA)
z[is.na(clumps)] <- NA
clumps[z > size[2]] <- NA
clumps[z < size[1]] <- NA
clumps <- raster::clump(clumps, directions = 8, gap = FALSE)
names(clumps) <- "clumps"
return(clumps)
}
# function to predict height (m) given a DBH (cm)
# DBH can be in inches with conversionFactor = 1.0 but height will still be returned in meters
predictHeight <- function(spp, DBH, conversionFactor = 2.54) {
# coefficients from:
# Hanus, M.L., D.D. Marshall, and D.W. Hann. 1999. Height-diameter equations for six
# species in the coastal regions of the Pacific Northwest.  Forestry Research
# Laboratory, contribution 25.  11 p.
# Ht = 4.5 + exp(a0 + a1 * DBH^a2)
# DBH = (ln((Ht - 4.5) / exp(a0)) / a1)^(1 / a2)
# Ht is in feet and DBH is in inches...hence the need for the conversion factor
species <- c("PSME", "ALRU", "PISI", "TSHE", "THPL", "PIMO")
a0 <- c(7.262195456, 4.41820972,  5.404491308, 6.555344622, 7.232880669, 7.946192109)
a1 <- c(-5.899759104, -12.00274935, -6.570862442, -5.137174162, -5.746899904, -6.278973035)
a2 <- c(-0.287207389, -2.13835482,  -0.819705048, -0.3645508,   -0.271564741, -0.208892429)
# match spp
sppIndex <- which(species == spp)
if (length(sppIndex) == 0)
stop("Invalid species...must be one of: ", paste(species, collapse = ","))
Ht = 4.5 + exp(a0[sppIndex] + a1[sppIndex] * (DBH / conversionFactor)^(a2[sppIndex]))
return(Ht / 3.2808)
}
# function to predict DBH (cm) given a height (m)
# height can be in feet with conversionFactor = 1.0 but DBH will still be returned in cm
predictDBH <- function(spp, height, conversionFactor = 3.2808) {
# coefficients from:
# Hanus, M.L., D.D. Marshall, and D.W. Hann. 1999. Height-diameter equations for six
# species in the coastal regions of the Pacific Northwest.  Forestry Research
# Laboratory, contribution 25.  11 p.
# Ht = 4.5 + exp(a0 + a1 * DBH^a2)
# DBH = (ln((Ht - 4.5) / exp(a0)) / a1)^(1 / a2)
# Ht is in feet and DBH is in inches...hence the need for the conversion factor
species <- c("PSME", "ALRU", "PISI", "TSHE", "THPL", "PIMO")
a0 <- c(7.262195456, 4.41820972,  5.404491308, 6.555344622, 7.232880669, 7.946192109)
a1 <- c(-5.899759104, -12.00274935, -6.570862442, -5.137174162, -5.746899904, -6.278973035)
a2 <- c(-0.287207389, -2.13835482,  -0.819705048, -0.3645508,   -0.271564741, -0.208892429)
# match spp
sppIndex <- which(species == spp)
if (length(sppIndex) == 0)
stop("Invalid species...must be one of: ", paste(species, collapse = ","))
DBH <- (log((height*conversionFactor - 4.5) / exp(a0[sppIndex])) / a1[sppIndex])^(1 / a2[sppIndex])
return(DBH * 2.54)
}
# load polygon and generate map with ortho imagery
polyFile <- params$polyFile
polys <- st_read(polyFile, quiet = TRUE)
#poly <- dplyr::filter(polys, Strategy == params$Strategy & Sub_unit == params$Sub_unit & Rx == params$Rx)
poly <- dplyr::filter(polys, Harvest_Rx == params$Rx & Block == params$Block)
poly <- poly[2,]
# project to UTM zone 10 to match drone lidar data
poly <- st_transform(poly, 26910)
# needed to prevent error while rendering
mapviewOptions(fgb = FALSE)
# render to object
x <- mapview(poly
, map.types = c("Esri.WorldImagery")
, layer.name = paste0(params$Strategy, "--", params$Sub_unit, "--", params$Rx)
, col = "white"
, col.regions = "grey80"
, lwd = 2
, alpha.regions = 0.2
)
# save image of map
mapshot(x
, file = paste0(params$Strategy, "--", params$Sub_unit, "--", params$Rx, ".png")
, remove_controls = c("zoomControl", "layersControl", "homeButton",
"drawToolbar", "easyButton")
)
# load CHM
#chm <- readDTM(paste0(params$baseFolder, "/Polygon", "/CHM.dtm"), type = "raster")
chm <- readDTM(paste0(params$baseFolder, "/Processing", "/CHM/CHM.dtm"), type = "raster", crs= CRS("+init=epsg:26910"))
# mask CHM using original polygon...
chm <- mask(chm, as_Spatial(poly))
# colors for CHM plot
col <- height.colors(50)
# create mask...areas at or above threshold
# @@@@ may be a better way to do this so we don't risk losing really large areas
mask <- getForestClumps(chm_layer=chm, threshold=0.0, size=c(0.1, 100000000))
mask_stats<-GapStats(gap_layer=mask, chm_layer=chm)
maskArea <- sum(mask_stats$gap_area)
layout(matrix(c(1,2), nrow = 2, ncol = 1))
par(mar=c(2, 2, 2, 2))
# plot CHM with color ramp...add polygon
plot(chm, col = col, asp = 1, main = "Canopy height", legend = FALSE)
plot(st_geometry(poly), col = NA, border = "black", add = TRUE, legend = FALSE)
plot(chm, col = col, asp = 1, main = "Canopy height", legend.only = TRUE, horizontal = FALSE)
plot(mask, col = "green", asp = 1, main = "Vegetation mask", legend = FALSE)
plot(st_geometry(poly), col = NA, border = "black", add = TRUE, legend = FALSE)
# compute values from CHM...used for thresholds
# produce histogram with vertical lines for height thresholds
maxht <- cellStats(chm, "max")
meanht <- cellStats(chm, "mean")
qs <- quantile(chm, probs = c(0.25, 0.5, 0.75))
install.packages('tinytex')
tinytex::install_tinytex()
webshot::install_phantomjs()
knitr::opts_chunk$set(
echo    = as.logical(params$show_code),
message = FALSE,
warning = FALSE,
fig.height = 9,
fig.width = 6
)
# load polygon and generate map with ortho imagery
polyFile <- params$polyFile
polys <- st_read(polyFile, quiet = TRUE)
library(sf)
library(dplyr)
library(kableExtra)
library(lidR)
library(raster)
library(ForestGapR)
library(mapview)
library(fusionwrapr)
# *****************************************************************************
# this is a modified version of the getForestGaps function from ForestGapR
# this finds clumps above the threshold height
# *****************************************************************************
getForestClumps <- function(chm_layer, threshold = 10, size = c(1, 10^4)) {
chm_layer[chm_layer < threshold] <- NA
chm_layer[chm_layer >= threshold] <- 1
clumps <- raster::clump(chm_layer, directions = 8, gap = FALSE)
rcl <- raster::freq(clumps)
rcl[, 2] <- rcl[, 2] * raster::res(chm_layer)[1]^2
rcl <- cbind(rcl[, 1], rcl)
z <- raster::reclassify(clumps, rcl = rcl, right = NA)
z[is.na(clumps)] <- NA
clumps[z > size[2]] <- NA
clumps[z < size[1]] <- NA
clumps <- raster::clump(clumps, directions = 8, gap = FALSE)
names(clumps) <- "clumps"
return(clumps)
}
# function to predict height (m) given a DBH (cm)
# DBH can be in inches with conversionFactor = 1.0 but height will still be returned in meters
predictHeight <- function(spp, DBH, conversionFactor = 2.54) {
# coefficients from:
# Hanus, M.L., D.D. Marshall, and D.W. Hann. 1999. Height-diameter equations for six
# species in the coastal regions of the Pacific Northwest.  Forestry Research
# Laboratory, contribution 25.  11 p.
# Ht = 4.5 + exp(a0 + a1 * DBH^a2)
# DBH = (ln((Ht - 4.5) / exp(a0)) / a1)^(1 / a2)
# Ht is in feet and DBH is in inches...hence the need for the conversion factor
species <- c("PSME", "ALRU", "PISI", "TSHE", "THPL", "PIMO")
a0 <- c(7.262195456, 4.41820972,  5.404491308, 6.555344622, 7.232880669, 7.946192109)
a1 <- c(-5.899759104, -12.00274935, -6.570862442, -5.137174162, -5.746899904, -6.278973035)
a2 <- c(-0.287207389, -2.13835482,  -0.819705048, -0.3645508,   -0.271564741, -0.208892429)
# match spp
sppIndex <- which(species == spp)
if (length(sppIndex) == 0)
stop("Invalid species...must be one of: ", paste(species, collapse = ","))
Ht = 4.5 + exp(a0[sppIndex] + a1[sppIndex] * (DBH / conversionFactor)^(a2[sppIndex]))
return(Ht / 3.2808)
}
# function to predict DBH (cm) given a height (m)
# height can be in feet with conversionFactor = 1.0 but DBH will still be returned in cm
predictDBH <- function(spp, height, conversionFactor = 3.2808) {
# coefficients from:
# Hanus, M.L., D.D. Marshall, and D.W. Hann. 1999. Height-diameter equations for six
# species in the coastal regions of the Pacific Northwest.  Forestry Research
# Laboratory, contribution 25.  11 p.
# Ht = 4.5 + exp(a0 + a1 * DBH^a2)
# DBH = (ln((Ht - 4.5) / exp(a0)) / a1)^(1 / a2)
# Ht is in feet and DBH is in inches...hence the need for the conversion factor
species <- c("PSME", "ALRU", "PISI", "TSHE", "THPL", "PIMO")
a0 <- c(7.262195456, 4.41820972,  5.404491308, 6.555344622, 7.232880669, 7.946192109)
a1 <- c(-5.899759104, -12.00274935, -6.570862442, -5.137174162, -5.746899904, -6.278973035)
a2 <- c(-0.287207389, -2.13835482,  -0.819705048, -0.3645508,   -0.271564741, -0.208892429)
# match spp
sppIndex <- which(species == spp)
if (length(sppIndex) == 0)
stop("Invalid species...must be one of: ", paste(species, collapse = ","))
DBH <- (log((height*conversionFactor - 4.5) / exp(a0[sppIndex])) / a1[sppIndex])^(1 / a2[sppIndex])
return(DBH * 2.54)
}
# load polygon and generate map with ortho imagery
polyFile <- params$polyFile
polys <- st_read(polyFile, quiet = TRUE)
#poly <- dplyr::filter(polys, Strategy == params$Strategy & Sub_unit == params$Sub_unit & Rx == params$Rx)
poly <- dplyr::filter(polys, Harvest_Rx == params$Rx & Block == params$Block)
poly <- poly[2,]
# project to UTM zone 10 to match drone lidar data
poly <- st_transform(poly, 26910)
# needed to prevent error while rendering
mapviewOptions(fgb = FALSE)
# render to object
x <- mapview(poly
, map.types = c("Esri.WorldImagery")
, layer.name = paste0(params$Strategy, "--", params$Sub_unit, "--", params$Rx)
, col = "white"
, col.regions = "grey80"
, lwd = 2
, alpha.regions = 0.2
)
# save image of map
mapshot(x
, file = paste0(params$Strategy, "--", params$Sub_unit, "--", params$Rx, ".png")
, remove_controls = c("zoomControl", "layersControl", "homeButton",
"drawToolbar", "easyButton")
)
paste0(params$Strategy, "--", params$Sub_unit, "--", params$Rx, ".png")
mapview(poly
, map.types = c("Esri.WorldImagery")
, layer.name = paste0(params$Strategy, "--", params$Sub_unit, "--", params$Rx)
, col = "white"
, col.regions = "grey80"
, lwd = 2
, alpha.regions = 0.2
)
mapshot(x
, file = paste0(params$Strategy, "--", params$Sub_unit, "--", params$Rx, ".png")
, remove_controls = c("zoomControl", "layersControl", "homeButton",
"drawToolbar", "easyButton")
)
mapshot(x
, file = paste0("test", ".png")
, remove_controls = c("zoomControl", "layersControl", "homeButton",
"drawToolbar", "easyButton")
)
?mapshot
